---

heat_template_version: 2021-04-16

description: |-
  Stack setup a GitLab Autoscaler Runners

parameters:
  key_name:
    type: string
    label: Key Name
    default: ci-admin
    description: Name of key-pair to be used for manager instance
    constraints:
      - custom_constraint: nova.keypair

  image_name:
    type: string
    label: Image Name
    default: fedora-38-runner
    description: Image to use
    constraints:
      - custom_constraint: glance.image

  public_net:
    type: string
    label: Public Network
    default: external
    constraints:
      - custom_constraint: neutron.network

  availability_zone:
    type: string
    label: Availability Zone
    default: ""

  manager_flavor:
    type: string
    label: Manager Flavor
    default: m1.medium
    description: Flavor for Manager instance.
    constraints:
      - custom_constraint: nova.flavor

  runner_flavor:
    type: string
    label: Runner Flavor
    default: gitlab-runner
    description: Flavor for Runner instance.
    constraints:
      - custom_constraint: nova.flavor

resources:
  stack_domain:
    type: OS::Heat::Value
    properties:
      type: string
      value:
        str_replace:
          template: {list_join: ['.', [{get_param: 'OS::stack_name'}, 'example.com.']]}
          params:
            '_': '-'
            ' ': '-'

  # -*- network -*-

  runner_net:
    type: OS::Neutron::Net
    properties:
      name: {list_join: ['-', [{get_param: 'OS::stack_name'}, 'runner']]}
      shared: false

  runner_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: {list_join: ['-', [{get_param: 'OS::stack_name'}, 'runner', 'subnet']]}
      cidr: &runner_cidr 10.42.0.0/24
      allocation_pools:
        - start: 10.42.0.10
          end: 10.42.0.254
      enable_dhcp: true
      dns_nameservers:
        - 8.8.8.8
        - 9.9.9.9
        - 1.1.1.1
      network: {get_resource: runner_net}

  runner_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: public_net}
        # enable_snat: true

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: runner_router }
      subnet_id: { get_resource: runner_subnet }

  allow_gitlab_runner:
    type: OS::Neutron::SecurityGroup
    properties:
      name: {list_join: ['-', [{get_param: 'OS::stack_name'}, 'allow_gitlab_runner']]}
      description: Security group for Gitlab Runner
      rules:
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
        -  # Allow ICMP
          direction: ingress
          protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
        -  # Allow SSH
          direction: ingress
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_max: 22
          port_range_min: 22
        -  # Allow session port (from gitlab)
          direction: ingress
          protocol: tcp
          remote_ip_prefix: &scm_cidr 1.2.3.4/32  # gitlab instance
          port_range_max: 8093
          port_range_min: 8093
        -  # Allow session port (internal network)
          direction: ingress
          protocol: tcp
          remote_ip_prefix: *runner_cidr
          port_range_max: 8093
          port_range_min: 8093
        -  # Allow metrics port (from gitlab)
          direction: ingress
          protocol: tcp
          remote_ip_prefix: *scm_cidr
          port_range_max: 8090
          port_range_min: 8090

  # -*- DNS -*-

  zone:
    type: OS::Designate::Zone
    properties:
      name: {get_attr: [stack_domain, value]}
      email: noreply@sardinasystems.com
      ttl: 300

  manager_a_record:
    type: OS::Designate::RecordSet
    properties:
      name: &mgr_dns_record_name {list_join: ['.', ['mgr', {get_attr: [stack_domain, value]}]]}
      zone: {get_resource: zone}
      ttl: 300
      type: A
      records:
        - &mgr_port_ip {get_attr: [manager_port, fixed_ips, 0, ip_address]}

  manager_aaaa_record:
    type: OS::Designate::RecordSet
    properties:
      name: *mgr_dns_record_name
      zone: {get_resource: zone}
      ttl: 300
      type: AAAA
      records:
        - {get_attr: [manager_port, fixed_ips, 1, ip_address]}

  gw_a_record:
    type: OS::Designate::RecordSet
    properties:
      name: &gw_dns_record_name {list_join: ['.', ['gw', {get_attr: [stack_domain, value]}]]}
      zone: {get_resource: zone}
      ttl: 300
      type: A
      records:
        - &gw_port_ip {get_attr: [runner_router, external_gateway_info, external_fixed_ips, 0, ip_address]}

  gw_aaaa_record:
    type: OS::Designate::RecordSet
    properties:
      name: *gw_dns_record_name
      zone: {get_resource: zone}
      ttl: 300
      type: AAAA
      records:
        - {get_attr: [runner_router, external_gateway_info, external_fixed_ips, 1, ip_address]}

  # -*- manager instance -*-

  manager_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: public_net}
      security_groups:
        - {get_resource: allow_gitlab_runner}

  manager_server:
    type: OS::Nova::Server
    properties:
      name: runner-manager
      flavor: {get_param: manager_flavor}
      image: {get_param: image_name}
      key_name: {get_param: key_name}
      availability_zone: {get_param: availability_zone}
      tags: [Gitlab, CI, Manager]
      metadata:
        ipa_enroll: "true"
        hostname: &mgr_hostname
          yaql:
            expression: regex(".$").replace($.data.name_and_zone, "")
            data:
              name_and_zone: *mgr_dns_record_name
      networks:
        - port: {get_resource: manager_port}
        - network: {get_resource: runner_net}

      user_data_format: RAW
      user_data: {get_resource: manager_cloud_config}

  manager_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        package_upgrade: true
        runcmd: &activate_runcmd
          # Activate podman socket activation
          - systemctl --now enable podman.socket
          - sudo -u fedora systemctl --user --now enable podman.socket
          - loginctl enable-linger gitlab-runner

  # -*- runner cluster -*-

  runner_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        # XXX(vermakov): takes too much time, easier to update the image
        # package_update: true
        # package_upgrade: true
        runcmd: *activate_runcmd

  runner_aa:
    type: OS::Nova::ServerGroup
    properties:
      policies:
        - soft-anti-affinity

  runner_key:
    type: OS::Nova::KeyPair
    properties:
      name: &runner_key_name {list_join: ['-', [{get_param: 'OS::stack_name'}, 'runner_key']]}
      public_key: {get_file: id_rsa.pub}

outputs:
  cluster_name:
    description: Cluster Name
    value: {get_param: 'OS::stack_name'}
  manager_hostname:
    description: Manager DNS name
    value: *mgr_hostname
  manager_ip_address:
    description: Manager IP Address
    value: *mgr_port_ip
  runner_gw_ip_address:
    description: Runner Gateway router IP Address
    value: *gw_port_ip
  network_id:
    description: Network
    value: {get_resource: runner_net}
  gitlab_sg:
    description: Security Group
    value: {get_resource: allow_gitlab_runner}
  runner_key_name:
    description: Runner SSH Key
    # value: {get_resource: runner_key}
    value: *runner_key_name
  runner_aa_sg:
    description: Runner Server Group
    value: {get_resource: runner_aa}
  runner_config:
    description: Runner Cloud Config
    value: {get_attr: [runner_cloud_config, config]}
  runner_image_name:
    description: Runner image
    value: {get_param: image_name}
  runner_flavor_name:
    description: Runner flavor
    value: {get_param: runner_flavor}
